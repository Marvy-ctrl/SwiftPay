"""added balance to user and deleted acc table

Revision ID: 1946da18be90
Revises: 498a3d891389
Create Date: 2025-09-27 15:19:12.266946

"""

from typing import Sequence, Union

from alembic import op
import sqlmodel
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1946da18be90"
down_revision: Union[str, Sequence[str], None] = "498a3d891389"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("transactions_receiver_uid_fkey"), "transactions", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("transactions_sender_uid_fkey"), "transactions", type_="foreignkey"
    )
    op.drop_table("accounts")
    op.create_foreign_key(None, "transactions", "users", ["sender_uid"], ["uid"])
    op.create_foreign_key(None, "transactions", "users", ["receiver_uid"], ["uid"])
    op.add_column(
        "users", sa.Column("balance", sa.NUMERIC(precision=12, scale=2), nullable=True)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "balance")
    op.drop_constraint(None, "transactions", type_="foreignkey")
    op.drop_constraint(None, "transactions", type_="foreignkey")
    op.create_foreign_key(
        op.f("transactions_sender_uid_fkey"),
        "transactions",
        "accounts",
        ["sender_uid"],
        ["uid"],
    )
    op.create_foreign_key(
        op.f("transactions_receiver_uid_fkey"),
        "transactions",
        "accounts",
        ["receiver_uid"],
        ["uid"],
    )
    op.create_table(
        "accounts",
        sa.Column("uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("account_number", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "balance",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_uid"], ["users.uid"], name=op.f("accounts_user_uid_fkey")
        ),
        sa.PrimaryKeyConstraint("uid", name=op.f("accounts_pkey")),
        sa.UniqueConstraint(
            "account_number",
            name=op.f("accounts_account_number_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    # ### end Alembic commands ###
